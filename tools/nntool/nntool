#!/usr/bin/env python3
# PYTHON_ARGCOMPLETE_OK

# Copyright 2019 GreenWaves Technologies, SAS
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#     http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import argparse
import sys
import os
from pathlib import Path
import importlib
import argcomplete

from _version import __version__


def create_parser():
    # create the top-level parser
    parser = argparse.ArgumentParser(prog='nntool')

    parser.add_argument('graph_file',
                        help='graph file - TFLite file or JSON state file',
                        metavar="INPUT_GRAPH or STATE_FILE",
                        nargs=argparse.OPTIONAL,
                        default="")
    parser.add_argument('-t', '--tensor_file',
                        help='optional tensor file',
                        metavar="TENSOR_FILE",
                        default="")
    exclus = parser.add_mutually_exclusive_group()
    exclus.add_argument('-g', '--generate',
                        help='generate code from a state file',
                        action='store_true')
    parser.add_argument('-c', '--template_file',
                        help='use this code template for generation',
                        metavar="TEMPLATE_FILE")
    parser.add_argument('-s', '--script_file',
                        help='run script and exit',
                        metavar="SCRIPT_FILE")
    parser.add_argument('-H', '--header_file',
                        help='write graph information to header file')
    parser.add_argument('-m', '--model_file',
                        help='override model file in state file')
    parser.add_argument('-M', '--model_directory',
                        help='override model directory in state file')
    parser.add_argument('-T', '--tensor_directory',
                        help='override tensor directory in state file')
    parser.add_argument('-d', '--dont_dump_tensors',
                        action='store_true',
                        help='don\'t dump tensors')
    parser.add_argument('-l', '--log_level', choices=['debug', 'info', 'warning'],
                        help='set logging level', default=None)
    parser.add_argument('-v', '--version',
                        action='store_true',
                        help='show version number')
    parser.add_argument('-q', '--tf_quant',
                        action='store_true',
                        help='load tflite quantization parameters')
    parser.add_argument('--dequant_tf',
                        action='store_true',
                        help='dequantize the tflite quantizated parameters')

    return parser

def main():
    parser = create_parser()
    argcomplete.autocomplete(parser)
    args = parser.parse_args()
    if args.version:
        print("NNTOOL Version {}".format(__version__))
        return

    if args.generate:
        mod = importlib.import_module('interpreter.generator')
        mod.generate_code(args)
        return

    nntool_workdir = os.path.join(str(Path.home()), '.nntool')
    os.makedirs(nntool_workdir, exist_ok=True, mode=0o755)
    # late import to speed up argcomplete
    mod = importlib.import_module('interpreter.nntool_shell')
    c = mod.NNToolShell(args,
                        nntool_workdir,
                        persistent_history_file=os.path.join(nntool_workdir, "history"))
    if args.script_file:
        sys.exit(c.run_script(args.script_file))
    else:
        sys.exit(c.cmdloop())

if __name__ == '__main__':
    main()
