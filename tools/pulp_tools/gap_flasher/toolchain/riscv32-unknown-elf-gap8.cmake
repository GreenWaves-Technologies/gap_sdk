set(CMAKE_SYSTEM_NAME Generic)
set(CMAKE_SYSTEM_PROCESSOR GAP8)

if(MINGW OR CYGWIN OR WIN32)
    set(UTIL_SEARCH_CMD where)
elseif(UNIX OR APPLE)
    set(UTIL_SEARCH_CMD which)
endif()

set(TOOLCHAIN_PREFIX riscv32-unknown-elf-)

execute_process(
  COMMAND ${UTIL_SEARCH_CMD} ${TOOLCHAIN_PREFIX}gcc
  OUTPUT_VARIABLE BINUTILS_PATH
  OUTPUT_STRIP_TRAILING_WHITESPACE
)

get_filename_component(GAP8_TOOLCHAIN_DIR ${BINUTILS_PATH} DIRECTORY)
# Without that flag CMake is not able to pass test compilation check
# set(CMAKE_TRY_COMPILE_TARGET_TYPE STATIC_LIBRARY)

set(CMAKE_C_COMPILER ${TOOLCHAIN_PREFIX}gcc)
set(CMAKE_ASM_COMPILER ${CMAKE_C_COMPILER})
set(CMAKE_CXX_COMPILER ${TOOLCHAIN_PREFIX}g++)

set(CMAKE_OBJCOPY ${GAP8_TOOLCHAIN_DIR}/${TOOLCHAIN_PREFIX}objcopy CACHE INTERNAL "objcopy tool")
set(CMAKE_AR ${GAP8_TOOLCHAIN_DIR}/${TOOLCHAIN_PREFIX}ar CACHE INTERNAL "ar tool")
set(CMAKE_SIZE_UTIL ${GAP8_TOOLCHAIN_DIR}/${TOOLCHAIN_PREFIX}size CACHE INTERNAL "size tool")
set(CMAKE_OBJDUMP ${GAP8_TOOLCHAIN_DIR}/${TOOLCHAIN_PREFIX}objdump CACHE INTERNAL "objdump tool")

set(CMAKE_C_FLAGS "-march=rv32imcxgap8 -mPE=8 -mFC=1 -D__riscv__ -D__pulp__ -fdata-sections -ffunction-sections -fno-jump-tables -fno-tree-loop-distribute-patterns" CACHE INTERNAL "Default C Flags")
if(DEFINED TARGET_INSTALL_DIR)
    set(INSTALL_LDDIR ${CMAKE_INSTALL_PREFIX}/ld)
else()
    set(INSTALL_LDDIR ${CMAKE_CURRENT_LIST_DIR}/../ld)
endif()
set(CMAKE_EXE_LINKER_FLAGS "-T${INSTALL_LDDIR}/link.gap8.ld -T${INSTALL_LDDIR}/gapuino.conf.ld -nostartfiles -nostdlib -Wl,--gc-sections" CACHE INTERNAL "Default linker Flags")

set(CMAKE_FIND_ROOT_PATH ${BINUTILS_PATH})
set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)
set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)
set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)