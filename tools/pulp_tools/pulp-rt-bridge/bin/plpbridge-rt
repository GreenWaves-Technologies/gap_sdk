#!/usr/bin/env python3

#
# Copyright (C) 2018 ETH Zurich and University of Bologna
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# Authors: Germain Haugou, ETH (germain.haugou@iis.ee.ethz.ch)


import bridge.rt_bridge as db
import argparse
import code
import imp
import os.path
import sys
import pulp_config as plpconf
import json_tools as js



class bcolors:
    HEADER = '\033[95m'
    OKBLUE = '\033[94m'
    OKGREEN = '\033[92m'
    WARNING = '\033[93m'
    FAIL = '\033[91m'
    ENDC = '\033[0m'
    BOLD = '\033[1m'
    UNDERLINE = '\033[4m'


def fatal_error(error):
    print (bcolors.FAIL + 'FATAL ERROR: ' + error + bcolors.ENDC)


parser = argparse.ArgumentParser(description='Control a pulp target',
  formatter_class=argparse.RawDescriptionHelpFormatter, add_help=False
)

parser.add_argument("--config", dest="config", default=None, help="Specify the system configuration")
parser.add_argument("--binary", dest="binaries", default=[], action="append", help="Specify a binary to be loaded by the load command")
parser.add_argument("--help", dest="help", action='store_true', default=False, help="Dump help")
parser.add_argument("--chip", dest="chip", default=None, help="Specify target chip")
parser.add_argument("--verbose", dest="verbose", type=int, default=3, help="Verbose mode")

[args, otherArgs] = parser.parse_known_args()

args = parser.parse_args()

if args.help:
    parser.print_help()
    exit(0)



config_path = args.config


if args.chip is not None:
    config_path = os.path.join(
        os.path.dirname(os.path.dirname(sys.argv[0])),
        'configs', 'chips', args.chip, '%s.json' % args.chip
    )

    if not os.path.exists(config_path):
        print ("ERROR, didn't find any configuration for specified chip (chip: %s, config: %s)" % (args.chip, config_path))
        exit(-1)

elif config_path is None:
    raise Exception('A chip or a config file must be specified')

config = plpconf.get_config(config_path, interpret=True)



binaries = []
binaries_conf = config.get('**/loader/binaries')
if binaries_conf is not None:
    binaries = binaries_conf.get_dict()
binaries = args.binaries + binaries

bridge = db.rt_bridge(config=config, verbose=args.verbose, binaries=binaries)

bridge.reqloop()
