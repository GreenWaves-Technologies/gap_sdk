{
  "version": 2,
  "archi"  : 2,

  "vp_class": "pulp/udma/udma_v2",

  "hal_files": [ "hal/udma/udma_v2.h" ],
  "archi_files": [ "archi/udma/udma_v2.h" ],

  "regmap": {

    "channel": {

      "type": "template",
      "saddr":{
        "type": "register",
        "offset": "0x00",
        "width" : 32,
        "desc" : "uDMA start reg",
        "content": {
          "saddr": {
            "bit": 0,
            "width": 16,
            "access": "R/W",
            "reset": "0x0",
            "desc": "Configure pointer to memory buffer:\n  - Read: value of the pointer until transfer is over. Else returns 0\n  - Write: set Address Pointer to memory buffer start address"
          }
        }
      },

      "size":{
        "type": "register",
        "offset": "0x04",
        "width" : 32,
        "desc" : "uDMA size reg",
        "content": {
          "size": {
            "bit": 0,
            "width": 16,
            "access": "R/W",
            "reset": "0x0",
            "desc": "Buffer size in DATASIZE. (128kBytes maximum)\n  - Read: buffer size left\n  - Write: set buffer size"
          }
        }
      },

      "cfg":{
        "type": "register",
        "offset": "0x08",
        "width" : 32,
        "desc" : "uDMA config reg",
        "content": {
          "continuous": {
            "bit": 0,
            "width": 1,
            "reset": "0x0",
            "access": "R/W",
            "desc": "Channel continuous mode:\n  -1'b0: disable\n  -1'b1: enable\nAt the end of the buffer the uDMA reloads the address and size and starts a new transfer."
          },
          "datasize": {
            "bit": 1,
            "width": 2,
            "reset": "0x0",
            "access": "R/W",
            "desc": "Channel transfer size used to increment uDMA buffer address pointer:\n  - 2'b00: +1 (8 bits)\n  - 2'b01: +2 (16 bits)\n  - 2'b10: +4 (32 bits)\n  - 2'b11: +0"
          },
          "en": {
            "bit": 4,
            "width": 1,
            "reset": "0x0",
            "access": "R/W",
            "desc": "Channel enable and start transfer:\n  -1'b0: disable\n  -1'b1: enable\nThis signal is used also to queue a transfer if one is already ongoing."
          },
          "clr": {
            "bit": 5,
            "width": 1,
            "reset": "0x0",
            "access": "W",
            "desc": "Channel clear and stop transfer:\n  -1'b0: disable\n  -1'b1: enable"
          },
          "pending": {
            "bit": 6,
            "width": 1,
            "reset": "0x0",
            "access": "R",
            "desc": "Transfer pending in queue status flag:\n  -1'b0: free\n  -1'b1: pending"
          }
        }
      }
    },

    "SPIM": {
      "type": "template",
      "RX": {
        "type": "group",
        "template": "channel",
        "offset": "0x00",
        "cfg":{
          "content": {
            "datasize": {
              "access": "R",
              "reset": "0x2"
            }
          }
        }
      },

      "TX": {
        "type": "group",
        "template": "channel",
        "offset": "0x10"
      }
    }
  },

  "commands": {
    "SPI_CMD_CFG": {
      "desc": "Sets the configuration for the SPI Master IP",
      "content": {
        "CLKDIV": {
          "bit": 0,
          "width": 8,
          "desc": "Sets the clock divider value"
        },
        "CPHA": {
          "bit": 8,
          "width": 1,
          "desc": "Sets the clock phase:\n  - 1'b0: \n  - 1'b1:"
        },
        "CPOL": {
          "bit": 9,
          "width": 1,
          "desc": "Sets the clock polarity:\n  - 1'b0:\n  - 1'b1:"
        },
        "SPI_CMD": {
          "bit": 28,
          "width": 4,
          "desc": "Select the SPIM command to be processed. Here CFG"
        }
      }
    },

    "SPI_CMD_SOT": {
      "desc": "Start of stream",
      "content": {
        "CS": {
          "bit": 0,
          "width": 2,
          "desc": "Sets the Chip Select (CS):\n  - 2'b00: select csn0\n  - 2'b01: select csn1\n  - 2'b10: select csn2\n  - 2'b11: select csn3"
        },
        "SPI_CMD": {
          "bit": 28,
          "width": 4,
          "desc": "Select the SPIM command to be processed. Here SOT"
        }
      }
    },

    "SPI_CMD_SEND_CMD": {
      "desc": "Transmits a configurable size command",
      "content": {
        "CMD_VALUE": {
          "bit": 0,
          "width": 16,
          "desc": "Sets the command to send. MSB must always be at bit15 also if cmd size is lower than 16"
        },
        "CMD_SIZE": {
          "bit": 16,
          "width": 5,
          "desc": "Size in bits of the command to send. The value written here is num bits - 1."
        },
        "QPI": {
          "bit": 27,
          "width": 1,
          "desc": "Sends the command using QuadSPI"
        },
        "SPI_CMD": {
          "bit": 28,
          "width": 4,
          "desc": "Select the SPIM command to be processed. Here SEND_CMD"
        }
      }
    },

    "SPI_CMD_SEND_ADDR": {
      "desc": "Transmits a configurable size address",
      "content": {
        "CMD_SIZE": {
          "bit": 16,
          "width": 5,
          "desc": "Size in bits of the address to send. The value written here is num bits - 1."
        },
        "QPI": {
          "bit": 27,
          "width": 1,
          "desc": "Sends the command using QuadSPI"
        },
        "SPI_CMD": {
          "bit": 28,
          "width": 4,
          "desc": "Select the SPIM command to be processed. Here SEND_ADDR"
        }
      }
    },

    "SPI_CMD_DUMMY": {
      "desc": "Transmits a configurable size address",
      "content": {
        "DUMMY_CYCLE": {
          "bit": 16,
          "width": 5,
          "desc": "Number of dummy cycles to perform"
        },
        "SPI_CMD": {
          "bit": 28,
          "width": 4,
          "desc": "Select the SPIM command to be processed. Here DUMMY"
        }
      }
    },

    "SPI_CMD_WAIT": {
      "desc": "Waits an external event to move to the next instruction",
      "content": {
        "EVENT_ID": {
          "bit": 0,
          "width": 2,
          "desc": "External event id"
        },
        "SPI_CMD": {
          "bit": 28,
          "width": 4,
          "desc": "Select the SPIM command to be processed. Here WAIT"
        }
      }
    },

    "SPI_CMD_TX_DATA": {
      "desc": "Sends data (max 64Kbits)",
      "content": {
        "DATA_SIZE": {
          "bit": 0,
          "width": 16,
          "desc": "Number of bits to send (Max 64Kbits). The value written here is num bits - 1."
        },
        "BYTE_ALIGN": {
          "bit": 26,
          "width": 1,
          "desc": "Disable byte alignment\n  - 1'b0: enable byte alignment\n  - 1'b1: disable byte alignment"
        },
        "QPI": {
          "bit": 27,
          "width": 1,
          "desc": "Sends the command using QuadSPI"
        },
        "SPI_CMD": {
          "bit": 28,
          "width": 4,
          "desc": "Select the SPIM command to be processed. Here TX_DATA"
        }
      }
    },

    "SPI_CMD_RX_DATA": {
      "desc": "Receives data (max 64Kbits)",
      "content": {
        "DATA_SIZE": {
          "bit": 0,
          "width": 16,
          "desc": "Number of bits to receive (Max 64Kbits). The value written here is num bits - 1."
        },
        "BYTE_ALIGN": {
          "bit": 26,
          "width": 1,
          "desc": "Disable byte alignment\n  - 1'b0: enable byte alignment\n  - 1'b1: disable byte alignment"
        },
        "QPI": {
          "bit": 27,
          "width": 1,
          "desc": "Sends the command using QuadSPI"
        },
        "SPI_CMD": {
          "bit": 28,
          "width": 4,
          "desc": "Select the SPIM command to be processed. Here RX_DATA"
        }
      }
    },

    "SPI_CMD_RPT": {
      "desc": "Repeat the next transfer N times",
      "content": {
        "RPT_CNT": {
          "bit": 0,
          "width": 16,
          "desc": "Number of transfers to repeat (Max 64K)"
        },
        "SPI_CMD": {
          "bit": 28,
          "width": 4,
          "desc": "Select the SPIM command to be processed. Here RPT"
        }
      }
    },

    "SPI_CMD_EOT": {
      "desc": "End of stream",
      "content": {
        "EVENT_GEN": {
          "bit": 0,
          "width": 1,
          "desc": "Enable EOT event:\n  - 1'b0: disable\n  - 1'b1: enable"
        },
        "SPI_CMD": {
          "bit": 28,
          "width": 4,
          "desc": "Select the SPIM command to be processed. Here EOT"
        }
      }
    },

    "SPI_CMD_RPT_END": {
      "desc": "End of the repeat loop command",
      "content": {
        "SPI_CMD": {
          "bit": 28,
          "width": 4,
          "desc": "Select the SPIM command to be processed. Here RPT_END"
        }
      }
    },

    "SPI_CMD_RX_CHECK": {
      "desc": "Check up ot 16 bits of data against an expected value",
      "content": {
        "COMP_DATA": {
          "bit": 0,
          "width": 16,
          "desc": "Data to compare. Max 16bits"
        },
        "STATUS_SIZE": {
          "bit": 16,
          "width": 4,
          "desc": "Size in bits of the word to read. The value written here is num bits - 1."
        },
        "CHECK_TYPE": {
          "bit": 24,
          "width": 2,
          "desc": "Select check to process:\n  - 2'b00: compare bit a bit\n  - 2'b01: compare only ones\n  - 2'b10: compare ony zeros"
        },
        "BYTE_ALIGN": {
          "bit": 26,
          "width": 1,
          "desc": "Disable byte alignment\n  - 1'b0: enable byte alignment\n  - 1'b1: disable byte alignment"
        },
        "QPI": {
          "bit": 27,
          "width": 1,
          "desc": "Sends the command using QuadSPI"
        },
        "SPI_CMD": {
          "bit": 28,
          "width": 4,
          "desc": "Select the SPIM command to be processed. Here RX_CHECK"
        }
      }
    },

    "SPI_CMD_FULL_DUPL": {
      "desc": "Activate full duplex mode",
      "content": {
        "DATA_SIZE": {
          "bit": 0,
          "width": 16,
          "desc": "Number of bits to send (Max 64Kbits). The value written here is num bits - 1."
        },
        "BYTE_ALIGN": {
          "bit": 26,
          "width": 1,
          "desc": "Disable byte alignment\n  - 1'b0: enable byte alignment\n  - 1'b1: disable byte alignment"
        },
        "SPI_CMD": {
          "bit": 28,
          "width": 4,
          "desc": "Select the SPIM command to be processed. Here FULL_DUPLEX"
        }
      }
    }
  }
}