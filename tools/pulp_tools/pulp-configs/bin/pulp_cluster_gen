#!/usr/bin/env python3.6

# Authors: Germain Haugou, ETH (germain.haugou@iis.ee.ethz.ch)

 
import json
import json_tools as js
import argparse
from comp_gen import *
import math

parser = argparse.ArgumentParser(
  description='Generate configuration for Pulp cluster',
  formatter_class=argparse.RawDescriptionHelpFormatter
)

parser.add_argument("--template", dest="template", default=None, help="Specify the cluster template")
parser.add_argument("--configs", dest="configs", default=[], action="append", help="Specify path to configurations")
parser.add_argument("--cluster-id", dest="cluster_id", default=0, type=int, help="Specify cluster ID")
parser.add_argument("--output", dest="output", default=None, help="Specify path to output configuration")
parser.add_argument("--graph", dest="graph", default=None, help="Specify path to output graph")

args = parser.parse_args()



if args.template is None:
  print ('The path to the template configuration must be given through option --template')
  exit(-1)


os.environ['PULP_CONFIGS_PATH'] = ':'.join(args.configs + os.environ.get('PULP_CONFIGS_PATH').split(':'))

tp = js.import_config_from_file(args.template, find=True)

cluster_id        = args.cluster_id
cluster_size      = tp.get_child_int("cluster/size")
nb_pe             = tp.get_child_int('cluster/nb_pe')
l1_banking_factor = tp.get_child_int('cluster/l1/banking_factor')
cluster_core      = tp.get_child_str('cluster/core')
cluster_version   = tp.get_child_int('cluster/version')
has_cc            = tp.get_child_bool('cluster/has_cc')
has_hwce          = tp.get('cluster/peripherals/hwce') is not None
dma_irq_0         = tp.get('cluster/pe/irq').get_dict().index('dma_0')
dma_irq_1         = tp.get('cluster/pe/irq').get_dict().index('dma_1')
dma_irq_ext       = tp.get('cluster/pe/irq').get_dict().index('dma_ext')
timer_irq_0       = tp.get('cluster/pe/irq').get_dict().index('timer_0')
timer_irq_1       = tp.get('cluster/pe/irq').get_dict().index('timer_1')
try:
  job_fifo_irq    = tp.get('cluster/pe/irq').get_dict().index('job_fifo')
except:
  job_fifo_irq    = None
#if tp.get('cluster/alias') is not None:
#  alias = tp.get_child_str('cluster/alias')
#else:
#  alias = "0x00000000"

nb_l1_banks = 1<<int(math.log2(nb_pe * l1_banking_factor))
l1_bank_size = int(tp.get_child_int('cluster/l1/size') / nb_l1_banks)



cluster = Component(
  version=cluster_version,
  nb_pe=nb_pe,
  has_cc=has_cc,
  vp_class="pulp/cluster/cluster"
)


axi_ico_mappings = {
  "soc": get_mapping(tp.get_child_dict("soc"))
}

cluster.cluster_ico = Component(
    includes=["ips/interco/router.json"],
    latency=2,
    mappings={
      "l1": get_mapping_area(tp.get_child_dict("cluster/l1"), cluster_size, cluster_id, True),
      "periph_ico": get_mapping_area(tp.get_child_dict("cluster/peripherals"), cluster_size, cluster_id),
      "periph_ico_alias": get_mapping(tp.get_child_dict("cluster/peripherals/alias"), add_offset=get_area_int('%d' % ((tp.get_child_int("cluster/peripherals/base") - tp.get_child_int("cluster/peripherals/alias/base"))), cluster_size, cluster_id)),
      "error": OrderedDict({ "base": get_area('%d' % tp.get_child_int("cluster/base"), cluster_size, cluster_id), "size": '0x%x' % cluster_size}),
      "soc": {}
    }
)

demux_eu_mapping = tp.get_child_dict("cluster/demux_peripherals/event_unit")
demux_eu_mapping['base'] = '0x%x' % (int(demux_eu_mapping['base'], 0) - tp.get_child_int("cluster/demux_peripherals/base"))
cluster.demux_periph_ico = Component(
    includes=["ips/interco/router.json"],
    mappings={
      "demux_event_unit": get_mapping(demux_eu_mapping),
    }
)

periph_ico_mappings = {}

for i in range(0, nb_pe):
  size = tp.get_child_int("cluster/peripherals/dbg_unit/size")
  base = tp.get_child_int("cluster/peripherals/dbg_unit/base") + cluster_id*cluster_size + size * i
  periph_ico_mappings['dbg_unit_%d' % i] = {
    "base": '0x%x' % base,
    "size": '0x%x' % size,
    "remove_offset": '0x%x' % base
  }

periph_ico_mappings.update({
  "cluster_ctrl": get_mapping_area(tp.get_child_dict("cluster/peripherals/cluster_ctrl"), cluster_size, cluster_id, True),
  "timer": get_mapping_area(tp.get_child_dict("cluster/peripherals/timer"), cluster_size, cluster_id, True),
  "event_unit": get_mapping_area(tp.get_child_dict("cluster/peripherals/event_unit"), cluster_size, cluster_id, True),
  "icache_ctrl": get_mapping_area(tp.get_child_dict("cluster/peripherals/icache_ctrl"), cluster_size, cluster_id, True),
  "dma": get_mapping_area(tp.get_child_dict("cluster/peripherals/dma"), cluster_size, cluster_id, True),
  "cluster_ico": {}
})

if has_hwce:
  periph_ico_mappings.update({
    "hwce": get_mapping_area(tp.get_child_dict("cluster/peripherals/hwce"), cluster_size, cluster_id, True)
  })

cluster.periph_ico = Component(
    includes=["ips/interco/router.json"],
    mappings=periph_ico_mappings
)

cluster.l1_ico = Component(  
  vp_class=None,
)

for i in range(0, nb_pe):
  l1_mapping = get_mapping_area(tp.get_child_dict("cluster/l1"), cluster_size, cluster_id, True)
  l1_mapping['id'] = 0

  l1_ts_mapping = get_mapping_area(tp.get_child_dict("cluster/l1"), cluster_size, cluster_id, True)
  l1_ts_mapping['base'] = '0x%x' % (int(l1_ts_mapping['base'], 0) + (1<<20))
  l1_ts_mapping['remove_offset'] = l1_ts_mapping['base']
  l1_ts_mapping['id'] = 0

  l1_alias_mapping = get_mapping(tp.get_child_dict("cluster/l1"), True)
  l1_alias_mapping['base'] = '0x%x' % (int(l1_alias_mapping['base'], 0) - tp.get_child_int("cluster/base") + tp.get_child_int("cluster/alias"))
  l1_alias_mapping['remove_offset'] = '0x%x' % (int(l1_alias_mapping['remove_offset'], 0) - tp.get_child_int("cluster/base") + tp.get_child_int("cluster/alias"))
  l1_alias_mapping['id'] = 0

  l1_ts_alias_mapping = get_mapping_area(tp.get_child_dict("cluster/l1"), cluster_size, cluster_id, True)
  l1_ts_alias_mapping['base'] = '0x%x' % (int(l1_ts_alias_mapping['base'], 0) - tp.get_child_int("cluster/base") + (1<<20) + tp.get_child_int("cluster/alias"))
  l1_ts_alias_mapping['remove_offset'] = '0x%x' % (int(l1_ts_alias_mapping['remove_offset'], 0) - tp.get_child_int("cluster/base") + (1<<20) + tp.get_child_int("cluster/alias"))
  l1_ts_alias_mapping['id'] = 0

  eu_mapping = get_mapping_area(tp.get_child_dict("cluster/demux_peripherals/event_unit"), cluster_size, cluster_id, True)
  eu_mapping['id'] = 1

  eu_alias_mapping = get_mapping(tp.get_child_dict("cluster/demux_peripherals/event_unit"), True)
  eu_alias_mapping['base'] = '0x%x' % (int(eu_alias_mapping['base'], 0) - tp.get_child_int("cluster/base") + tp.get_child_int("cluster/alias"))
  eu_alias_mapping['remove_offset'] = '0x%x' % (int(eu_alias_mapping['remove_offset'], 0) - tp.get_child_int("cluster/base") + tp.get_child_int("cluster/alias"))
  eu_alias_mapping['id'] = 1

  dma_mapping = get_mapping_area(tp.get_child_dict("cluster/demux_peripherals/dma"), cluster_size, cluster_id, True)
  dma_mapping['id'] = 1

  dma_alias_mapping = get_mapping(tp.get_child_dict("cluster/demux_peripherals/dma"), True)
  dma_alias_mapping['base'] = '0x%x' % (int(dma_alias_mapping['base'], 0) - tp.get_child_int("cluster/base") + tp.get_child_int("cluster/alias"))
  dma_alias_mapping['remove_offset'] = '0x%x' % (int(dma_alias_mapping['remove_offset'], 0) - tp.get_child_int("cluster/base") + tp.get_child_int("cluster/alias"))
  dma_alias_mapping['id'] = 1

  cluster.l1_ico.add_component(
    'pe%d_ico' % i,
    Component(
      includes=["ips/interco/router.json"],
      mappings={
        "l1": l1_mapping,
        "l1_ts": l1_ts_mapping,
        "event_unit": eu_mapping,
        "dma": dma_mapping,
        "l1_alias": l1_alias_mapping,
        "l1_ts_alias": l1_ts_alias_mapping,
        "event_unit_alias": eu_alias_mapping,
        "dma_alias": dma_alias_mapping,
        "cluster_ico": { "id": 1 }
      }
    )
  )


cluster.l1_ico.interleaver = Component(
  includes=["ips/interco/l1_interleaver.json"],
  nb_slaves= nb_l1_banks,
  nb_masters= nb_pe + 4,
  interleaving_bits= 2
)

cluster.l1_ico.ext2loc = Component(
  includes=["ips/interco/converter.json"],
  output_width=4,
  output_align=4
)

cluster.l1 = Component(
  vp_class= None,
  size=tp.get_child_int("cluster/l1/size"),
  alias=True,
  has_l1_alias=True,
  alias_base=tp.get_child_str("cluster/alias"),
  map_base=tp.get_child_str("cluster/l1/base"),
  nb_banks=nb_l1_banks,
)

for i in range(0, nb_l1_banks):
  cluster.l1.add_component(
    'bank%d' % i,
    Component(
      size=l1_bank_size,
      vp_class="memory/memory",
      power_models={"includes": ["power_models/l1/l1.json"] },
      power_trigger= True if i == 0 else False
    )
  )

cluster.icache = Empty_Component(
  version=1,
  size=4096,
  line_size=16,
  banking_factor=4,
  ports=8,
  ways=1,
  enabled=True
)

cluster.dma = Component(
  includes=["ips/mchan/mchan_v%d.json" % tp.get_child_int('cluster/peripherals/dma/version')],
  nb_channels=nb_pe+1,
  is_64=tp.get_child_bool('cluster/peripherals/dma/is_64') == True
)

cluster.cluster_ctrl = Component(
  includes=["ips/cluster_ctrl/cluster_ctrl_v2.json"],
  nb_core=nb_pe
)

cluster.event_unit = Component(
  includes=["ips/event_unit/eu_v3.json"],
  nb_core=nb_pe
)

cluster.timer = Component(
  includes=["ips/timer/timer_v2.json"]
)

if has_hwce:
  cluster.hwce = Component(
    includes=["ips/hwce/hwce_v%d.json" % tp.get_child_int('cluster/peripherals/hwce/version')]
  )

cluster.icache_ctrl = Component(
  includes=["ips/icache_ctrl/icache_ctrl_v2.json"]
)

cluster.pe = Empty_Component(
)

for i in range(0, nb_pe):
  cluster.add_component(
    'pe%d' % i,
    Component(
      includes=["ips/riscv/%s.json" % cluster_core],
      cluster_id=cluster_id,
      core_id=i,
      fetch_enable=tp.get_child_bool("cluster%d/pe%d/fetch_enable" % (cluster_id, i)),
      boot_addr=tp.get_child_str("cluster%d/pe%d/boot_addr" % (cluster_id, i))
    )
  )

  cluster.add_component(
    'pe',
    Empty_Component(
      includes=["ips/riscv/%s.json" % cluster_core],
      cluster_id=cluster_id,
      core_id=0,
      boot_addr="0x1C000000"
    )
  )


cluster.dma.ext_irq_itf = cluster.dma_irq
cluster.cluster_ico.soc = cluster.soc
cluster.input = cluster.cluster_ico.input
cluster.cluster_ico.l1 = cluster.l1_ico.ext2loc_itf
cluster.cluster_ico.periph_ico = cluster.periph_ico.input
cluster.cluster_ico.periph_ico_alias = cluster.periph_ico.input
cluster.periph_ico.icache_ctrl = cluster.icache_ctrl.input
cluster.periph_ico.event_unit = cluster.event_unit.input
cluster.periph_ico.cluster_ctrl = cluster.cluster_ctrl.input
cluster.periph_ico.timer = cluster.timer.input
cluster.ref_clock = cluster.timer.ref_clock
cluster.periph_ico.dma = cluster.dma.new_itf("in_%d" % nb_pe)

for i in range(0, nb_pe):
  cluster.periph_ico.set('dbg_unit_%d' % i, cluster.get('pe%d' % i).dbg_unit)

for i in range(0, nb_pe):
  cluster.cluster_ctrl.set('bootaddr_%d' % i, cluster.get('pe%d' % i).bootaddr)

for i in range(0, nb_pe):
  cluster.cluster_ctrl.set('fetchen_%d' % i, cluster.get('pe%d' % i).fetchen)

for i in range(0, nb_pe):
  cluster.cluster_ctrl.set('halt_%d' % i, cluster.get('pe%d' % i).halt)

for i in range(0, nb_pe):
  cluster.get('pe%d' % i).halt_status = cluster.cluster_ctrl.new_itf('core_halt_%d' % i)

for i in range(0, nb_pe):
  cluster.get('pe%d' % i).data = cluster.l1_ico.new_itf('data_pe_%d' % i)

for i in range(0, nb_pe):
  cluster.get('pe%d' % i).fetch = cluster.cluster_ico.input

for i in range(0, nb_pe):
  cluster.l1_ico.set('event_unit_%d' % i, cluster.event_unit.new_itf('demux_in_%d' % i))

for i in range(0, nb_pe):
  cluster.l1_ico.set('event_unit_alias_%d' % i, cluster.event_unit.new_itf('demux_in_%d' % i))

for i in range(0, nb_pe):
  cluster.l1_ico.set('dma_%d'%i, cluster.dma.new_itf('in_%d'%i))

for i in range(0, nb_pe):
  cluster.l1_ico.set('dma_alias_%d'%i, cluster.dma.new_itf('in_%d'%i))

for i in range(0, nb_pe):
  cluster.dma.set('event_itf_%d' % i, cluster.event_unit.new_itf('in_event_%d_pe_%d' % (dma_irq_0, i)))

for i in range(0, nb_pe):
  cluster.dma.set('irq_itf_%d' % i, cluster.event_unit.new_itf('in_event_%d_pe_%d' % (dma_irq_1, i)))

for i in range(0, nb_pe):
  cluster.dma.ext_irq_itf = cluster.event_unit.new_itf('in_event_%d_pe_%d' % (dma_irq_ext, i))

for i in range(0, nb_pe):
  cluster.timer.irq_itf_0 = cluster.event_unit.new_itf('in_event_%d_pe_%d' % (timer_irq_0, i))

for i in range(0, nb_pe):
  cluster.timer.irq_itf_1 = cluster.event_unit.new_itf('in_event_%d_pe_%d' % (timer_irq_1, i))

for i in range(0, nb_pe):
  cluster.event_unit.set('irq_req_%d' % i, cluster.get('pe%d' % i).irq_req)

for i in range(0, nb_pe):
  cluster.get('pe%d' % i).irq_ack = cluster.event_unit.new_itf('irq_ack_%d' % i)

  for j in range(11, 16):
    cluster.get('pe%d' % i).set('ext_counter[%d]' % j, cluster.l1_ico.new_itf('ext_counter_%d[%d]' % (i, j)))

cluster.periph_ico.cluster_ico = cluster.cluster_ico.input

for i in range(0, nb_l1_banks):
  cluster.l1.set('in_%d'%i, cluster.l1.get('bank%d'%i).input)

for i in range(0, nb_l1_banks):
  cluster.l1_ico.set('out_%d' % i, cluster.l1.new_itf('in_%d' % i))

cluster.l1_ico.cluster_ico = cluster.cluster_ico.input
cluster.dma.ext_itf = cluster.cluster_ico.input

for i in range(0, 4):
  cluster.dma.set('loc_itf_%d' % i, cluster.l1_ico.new_itf('dma_in_%d' % i))
 


for i in range(0, 4):
  cluster.l1_ico.set('dma_in_%d' % i, cluster.l1_ico.interleaver.new_itf('in_%d' % (nb_pe + i)))

for i in range(0, nb_pe):
  cluster.l1_ico.get('pe%d_ico' % i).dma = cluster.l1_ico.new_itf('dma_%d'%i)

for i in range(0, nb_pe):
  cluster.l1_ico.get('pe%d_ico' % i).dma_alias = cluster.l1_ico.new_itf('dma_alias_%d'%i)

for i in range(0, nb_pe):  
  cluster.l1_ico.get('pe%d_ico' % i).event_unit = cluster.l1_ico.new_itf('event_unit_%d'%i)

for i in range(0, nb_pe):  
  cluster.l1_ico.get('pe%d_ico' % i).event_unit_alias = cluster.l1_ico.new_itf('event_unit_alias_%d'%i)

for i in range(0, nb_pe):  
  cluster.l1_ico.get('pe%d_ico' % i).cluster_ico = cluster.l1_ico.cluster_ico

for i in range(0, nb_l1_banks):
  cluster.l1_ico.interleaver.set('out_%d'%i, cluster.l1_ico.new_itf('out_%d'%i))

cluster.l1_ico.ext2loc_itf = cluster.l1_ico.ext2loc.input

for i in range(0, nb_pe):
  cluster.l1_ico.set('ext_counter_%d[11]'%(i), cluster.l1_ico.get('pe%d_ico'%i).new_itf('nb_read[1]'))

for i in range(0, nb_pe):
  cluster.l1_ico.set('ext_counter_%d[12]'%(i), cluster.l1_ico.get('pe%d_ico'%i).new_itf('nb_write[1]'))
  
for i in range(0, nb_pe):
  cluster.l1_ico.set('ext_counter_%d[13]'%(i), cluster.l1_ico.get('pe%d_ico'%i).new_itf('read_stalls[1]'))
  
for i in range(0, nb_pe):
  cluster.l1_ico.set('ext_counter_%d[14]'%(i), cluster.l1_ico.get('pe%d_ico'%i).new_itf('write_stalls[1]'))
  
for i in range(0, nb_pe):
  cluster.l1_ico.set('ext_counter_%d[15]'%(i), cluster.l1_ico.get('pe%d_ico'%i).new_itf('stalls[0]'))

for i in range(0, nb_pe):
  cluster.l1_ico.set('data_pe_%d'%i, cluster.l1_ico.get('pe%d_ico'%i).input)

for i in range(0, nb_pe):
  cluster.l1_ico.get('pe%d_ico'%i).l1 = cluster.l1_ico.interleaver.new_itf('in_%d'%i)

for i in range(0, nb_pe):
  cluster.l1_ico.get('pe%d_ico'%i).l1_alias = cluster.l1_ico.interleaver.new_itf('in_%d'%i)

for i in range(0, nb_pe):
  cluster.l1_ico.get('pe%d_ico'%i).l1_ts = cluster.l1_ico.interleaver.new_itf('ts_in_%d'%i)

for i in range(0, nb_pe):
  cluster.l1_ico.get('pe%d_ico'%i).l1_ts_alias = cluster.l1_ico.interleaver.new_itf('ts_in_%d'%i)


cluster.l1_ico.ext2loc.out = cluster.l1_ico.interleaver.new_itf('in_%d'%nb_pe)


if job_fifo_irq is not None:
  for i in range(0, nb_pe):
    cluster.job_fifo_irq = cluster.event_unit.new_itf('in_event_%d_pe_%d' % (job_fifo_irq, i))



config = cluster.get_json_config()

if args.output is not None:
  with open(args.output, 'w') as file:
    file.write(config)
    file.write('\n')

if args.graph is not None:
  with open(args.graph, 'w') as file:
    file.write(cluster.get_graph())
    file.write('\n')

