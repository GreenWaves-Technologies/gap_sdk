#!/usr/bin/env python3.6

# Authors: Germain Haugou, ETH (germain.haugou@iis.ee.ethz.ch)

 
import json
import json_tools as js
import argparse
from comp_gen import *

parser = argparse.ArgumentParser(
  description='Generate configuration for Pulp soc',
  formatter_class=argparse.RawDescriptionHelpFormatter
)
parser.add_argument("--json", dest="json", default=None, help="Specify path to JSON file")
parser.add_argument("--output", dest="output", default=None, help="Specify path to output configuration")

args = parser.parse_args()

config = js.import_config_from_file(args.json)












def get_tree(config, parent, name):
  if type(config) == list:
    print ('GET LIST')
    tree = []
    for elem_config in config:
      pass
      #subtree = get_tree(elem_config)

  elif type(config) == dict or type(config) == OrderedDict:
    vp_comps = config.get('vp_comps')

    comp = Component()
    parent.add_component(name, comp)

    if vp_comps is None:
      return

    for key, value in config.items():
      if key == 'vp_comps':
        continue

      if key in vp_comps:
        get_tree(value, comp, key)

    bindings = config.get('vp_bindings')
    if bindings is not None:
      for binding in bindings:
        master_desc, slave_desc = binding
        master, master_port = master_desc.split('->')
        slave, slave_port = slave_desc.split('->')

        if master == 'self':
          master_comp = comp
        else:
          master_comp = comp.get(master)

        if slave == 'self':
          slave_comp = comp
        else:
          slave_comp = comp.get(slave)

        master_comp.set(master_port, slave_comp.new_itf(slave_port))

  elif type(config) == str:
    return None
  elif type(config) == bool:
    return None
  else:
    return None



system = Component()
get_tree(config.get_dict(), system, 'top')



config = system.get_json_config()


print (config)






config = system.get_graph()

if args.output is not None:
  with open(args.output, 'w') as file:
    file.write(config)
    file.write('\n')

