#!/usr/bin/env python3.6

# Authors: Germain Haugou, ETH (germain.haugou@iis.ee.ethz.ch)

 
import json
import json_tools as js
import argparse
from comp_gen import *

parser = argparse.ArgumentParser(
  description='Generate configuration for Pulp system',
  formatter_class=argparse.RawDescriptionHelpFormatter
)

parser.add_argument("--template", dest="template", default=None, help="Specify the soc template")
parser.add_argument("--chip", dest="chip", default="pulp", help="Specify the chip")
parser.add_argument("--chip-file", dest="chip_file", default=None, help="Specify the chip JSON file")
parser.add_argument("--configs", dest="configs", default=[], action="append", help="Specify path to configurations")
parser.add_argument("--output", dest="output", default=None, help="Specify path to output configuration")

[args, known_args] = parser.parse_known_args()

args = parser.parse_args()

if args.template is None:
  print ('The path to the template configuration must be given through option --template')
  exit(-1)


os.environ['PULP_CONFIGS_PATH'] = ':'.join(args.configs + os.environ.get('PULP_CONFIGS_PATH').split(':'))

tp = js.import_config_from_file(args.template, find=True)


chip_file = 'chip.json'

if args.chip_file is not None:
  chip_file = args.chip_file

start_addr = None
stop_addr = None
set_pc_addr = None
set_pc_offset = None
debug_bridge_commands = None

if args.chip in ['pulpissimo', 'pulp', 'pulpissimo_v1', 'pulp_v1']:
    start_addr = '0x%X' % (tp.get_child_int("soc/peripherals/fc_dbg_unit/base") + 0x0000)
    start_value = '0'
    stop_addr = '0x%X' % (tp.get_child_int("soc/peripherals/fc_dbg_unit/base") + 0x0000)
    stop_value = '0x00010000'
    set_pc_addr = '0x%X' % (tp.get_child_int("soc/peripherals/fc_dbg_unit/base") + 0x2000)
    debug_bridge_commands = 'reset stop load ioloop reqloop start wait'

if args.chip in ['vivosoc3']:
    start_addr = '0x1A104014'
    start_value = '1'
    stop_addr = '0x%X' % (tp.get_child_int("soc/peripherals/fc_dbg_unit/base") + 0x0000)
    stop_value = '0x00010000'
    set_pc_addr = '0x1A104010'
    debug_bridge_commands = 'reset stop load ioloop reqloop start wait'

if args.chip in ['multino', 'bigpulp-standalone', 'bigpulp', 'bigpulp-z-7045', 'oprecompkw_sa']:
    start_addr = '0x%X' % (tp.get_child_int("cluster/peripherals/cluster_ctrl/base") + 0x0008)
    start_value = '1'
    stop_addr = '0x%X' % (tp.get_child_int("cluster/peripherals/cluster_ctrl/base") + 0x0008)
    stop_value = '0x00010000'
    set_pc_addr = '0x%X' % (tp.get_child_int("cluster/peripherals/cluster_ctrl/base") + 0x0040)
    set_pc_offset = "-128"
    debug_bridge_commands = 'reset stop load ioloop reqloop start wait'

system = Component(
)


system.system_tree = Empty_Component(
    includes=[ "pulp_system_common.json" ],
    vp_class= "pulp/system"
)

system.system_tree.debug_bridge = Empty_Component(
)

if start_addr is not None:
    system.system_tree.debug_bridge.set_property('start_addr', start_addr)
    system.system_tree.debug_bridge.set_property('start_value', start_value)

if stop_addr is not None:
    system.system_tree.debug_bridge.set_property('stop_addr', stop_addr)
    system.system_tree.debug_bridge.set_property('stop_value', stop_value)

if set_pc_addr is not None:
    system.system_tree.debug_bridge.set_property('set_pc_addr', set_pc_addr)

if set_pc_offset is not None:
    system.system_tree.debug_bridge.set_property('set_pc_offset', set_pc_offset)

if debug_bridge_commands is not None:
    system.system_tree.debug_bridge.set_property('commands', debug_bridge_commands)



system.system_tree.board = Component(
    vp_class= "pulp/board"
)


system.system_tree.board.chip = Component(
    includes=[ chip_file ]
)

system.system_tree.board.dpi_clock = Component(
    vp_class= "vp/clock_domain",
    frequency= 50000000
)

system.system_tree.board.pulp_chip = Component(
)
system.system_tree.board.pulp_chip.set_property(args.chip, {})


system.system_tree.board.dpi = Component(
    includes= [ "periph/dpi_wrapper.json" ]
)

system.system_tree.board.dpi_clock.out = system.system_tree.board.dpi.clock
system.system_tree.board.dpi.chip_reset = system.system_tree.board.chip.reset


system.system_tree.board.ref_clock_clock = Component(
vp_class="vp/clock_domain",
frequency=65536
)

system.system_tree.board.ref_clock = Component(
  includes= [ "ips/misc/clock.json" ]
)

system.system_tree.board.ref_clock_clock.out = system.system_tree.board.ref_clock.clock

system.system_tree.board.ref_clock.clock_sync = system.system_tree.board.chip.ref_clock

system.system_tree.board.ref_clock_clock.out = system.system_tree.board.chip.ref_clock_engine



if args.chip == 'wolfe':
  system.system_tree.board.bootsel = Component(
    vp_class= "board/switch",
    value="0"
  )

  system.system_tree.board.bootsel.out = system.system_tree.board.chip.bootsel



has_ddr = tp.get('ddr') is not None

if has_ddr:

  system.system_tree.board.ddr_clock = Component(
    vp_class="vp/clock_domain",
    frequency=tp.get_child_str("ddr/frequency")
  )

  system.system_tree.board.ddr = Component(
      includes= [ "ips/memory/ddr.json" ],
      size= tp.get_child_str("ddr/size")
  )

  system.system_tree.board.chip.ddr = system.system_tree.board.ddr.input
  system.system_tree.board.ddr_clock.out = system.system_tree.board.ddr.clock



config = system.get_json_config(configs=args.configs)

if args.output is not None:
  with open(args.output, 'w') as file:
    file.write(config)
    file.write('\n')
