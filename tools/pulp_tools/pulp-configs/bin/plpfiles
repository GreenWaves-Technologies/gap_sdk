#!/usr/bin/env python3

import pulp_config as plpconf
import argparse
import os
import sys

class bcolors:
    HEADER = '\033[95m'
    OKBLUE = '\033[94m'
    OKGREEN = '\033[92m'
    WARNING = '\033[93m'
    FAIL = '\033[91m'
    ENDC = '\033[0m'
    BOLD = '\033[1m'
    UNDERLINE = '\033[4m'

parser = argparse.ArgumentParser(description='Manage SDK files')

parser.add_argument('command', metavar='CMD', type=str, nargs='*',
                   help='a command to be executed')

parser.add_argument("--debug", dest="debug", action='store_true', default=False, help="Activate debug mode for this script")

[args, otherArgs] = parser.parse_known_args() 

if 'copy' in args.command:

    parser.add_argument("--item", dest="item", default=None, help="Specify the item name in the config file which contains the files to copy")
    parser.add_argument("--input-dir", dest="input_dir", default=None, help="Specify input directory containing the files to copy")
    parser.add_argument("--output-dir", dest="output_dir", default=None, help="Specify output directory where to copy the files")

args = parser.parse_args()



def copy(files, input_dir=args.input_dir, output_dir=args.output_dir):
    files = files.copy(args.item, input_dir, output_dir)
    print (' '.join(files))
    return 0




commands = {
      'copy'     : ['Copy files to SDK', copy],
      }




class Files(object):

    def __init__(self, tools_path=None):
        self.configs = plpconf.get_configs_from_env(path=tools_path)

    def handle_node(self, node, item, input_dir, output_dir):
        prop = node.get(item)
        if prop is not None:
            for file in prop.get_dict():
                if not file in self.files:
                    self.files.append(file)
                #input_path = os.path.join(input_dir, file())
                #output_path = os.path.join(output_dir, file())
                #os.makedirs(os.path.dirname())
                #shutil.copy(input_path, output_path)

    def copy(self, item, input_dir, output_dir):
        self.files = []
        for config in self.configs:
            config.browse(self.handle_node, item, input_dir, output_dir)

        return self.files



def handleCommands(files, log=None):

  global pendingCommands

  if len(args.command) == 0:
      parser.print_help()
      print ()
      print ('Available commands:')
      for name, cmd in commands.items():
        print ('  %-10s %s' % (name, cmd[0]))
      exit(0)
  
  else:

    while True:

        if len(args.command) == 0: 
          return

        cmd = args.command.pop(0)

        if commands.get(cmd)[1](files) != 0:
            print ()
            print (bcolors.FAIL + 'FATAL ERROR: the command \'%s\' has failed' % (cmd) + bcolors.ENDC)
            return




try:
  files = Files()

  handleCommands(files)

  #project = plp.Project(tools_path=toolsDir, packages=args.packages, distrib=args.distrib, cmd_callback=execCommand, log=args.log, stdout=args.stdout, stdout_cached=args.stdout_cached, nb_threads=args.threads, db=args.db)
  
  #exit(project.get_status())

except Exception as e:
    print (bcolors.FAIL + 'FATAL ERROR: %s' % (bcolors.ENDC + str(e)))
    if args.debug: raise
    else: exit(-1)