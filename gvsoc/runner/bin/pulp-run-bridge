#!/usr/bin/env python3

#
# Copyright (C) 2018 ETH Zurich, University of Bologna and GreenWaves Technologies
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# 
# Authors: Germain Haugou, ETH (germain.haugou@iis.ee.ethz.ch)
#

import argparse
import io
import sys
import time
import subprocess
import os
import shlex

parser = argparse.ArgumentParser(description='Launch a test on the specified architecture.', add_help=False)

parser.add_argument("--dir", dest="dir", default=os.getcwd(),
                 help="specify the test directory containing the binaries and from which the execution must be launched.", metavar="PATH")

parser.add_argument("--config-file", dest="configFile", default=None, help='specify the system configuration file')
parser.add_argument("--options", dest="options", default=None, help="Bridge options")
parser.add_argument("--wait-pulp-run", dest="wait_pulp_run", action="store_true", help="Wait for pulp-run termination instead of termination")


args = parser.parse_args()

prun = subprocess.Popen(shlex.split('pulp-run --reentrant --dir=%s --config-file=%s' % (args.dir, args.configFile)),stderr=subprocess.PIPE, bufsize=1)
port = None
for line in io.TextIOWrapper(prun.stderr, encoding="utf-8"):
    sys.stderr.write(line)
    string = 'Proxy listening on port '
    pos = line.find(string)
    if pos != -1:
        port = line[pos + len(string):]
        break

if port is None:
    exit(-1)

bridge_cmd = 'plpbridge --config-path=%s/plt_config.json --verbose=10 --port=%s' % (os.getcwd(), port)
if args.options is not None:
  bridge_cmd += ' ' + args.options
print ('Launching bridge with command:')
print (bridge_cmd)
time.sleep(2)
bridge = subprocess.Popen(shlex.split(bridge_cmd), cwd=args.dir)

retval = bridge.wait()
if args.wait_pulp_run:
  prun.wait()
else:
  prun.terminate()
