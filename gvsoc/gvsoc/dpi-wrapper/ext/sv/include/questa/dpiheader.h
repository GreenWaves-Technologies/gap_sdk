/* MTI_DPI */

/*
 * Copyright 2002-2017 Mentor Graphics Corporation.
 *
 * Note:
 *   This file is automatically generated.
 *   Please do not edit this file - you will lose your edits.
 *
 * Settings when this file was generated:
 *   PLATFORM = 'linux_x86_64'
 */
#ifndef INCLUDED_DPIHEADER
#define INCLUDED_DPIHEADER

#ifdef __cplusplus
#define DPI_LINK_DECL  extern "C" 
#else
#define DPI_LINK_DECL 
#endif

#include "svdpi.h"



DPI_LINK_DECL DPI_DLLESPEC
void*
dpi_config_get_config(
    void* config_handle,
    const char* path);

DPI_LINK_DECL DPI_DLLESPEC
void*
dpi_config_get_from_file(
    const char* path);

DPI_LINK_DECL DPI_DLLESPEC
int
dpi_config_get_int(
    void* config_handle);

DPI_LINK_DECL DPI_DLLESPEC
const char*
dpi_config_get_str(
    void* config_handle);

DPI_LINK_DECL DPI_DLLESPEC
void*
dpi_ctrl_bind(
    void* dpi_model,
    const char* name,
    int handle);

DPI_LINK_DECL DPI_DLLESPEC
void*
dpi_driver_get_comp_config(
    void* driver_handle,
    int index);

DPI_LINK_DECL DPI_DLLESPEC
void
dpi_driver_get_comp_itf_info(
    void* comp_handle,
    int index,
    int itf_index,
    const char** itf_name,
    const char** itf_type,
    int* itf_id,
    int* itf_sub_id);

DPI_LINK_DECL DPI_DLLESPEC
const char*
dpi_driver_get_comp_name(
    void* driver_handle,
    int index);

DPI_LINK_DECL DPI_DLLESPEC
int
dpi_driver_get_comp_nb_itf(
    void* comp_handle,
    int index);

DPI_LINK_DECL DPI_DLLESPEC
int
dpi_driver_get_nb_comp(
    void* driver_handle);

DPI_LINK_DECL DPI_DLLESPEC
void*
dpi_driver_set_config(
    void* config_handle);

DPI_LINK_DECL DPI_DLLESPEC
void*
dpi_jtag_bind(
    void* dpi_model,
    const char* name,
    int handle);

DPI_LINK_DECL DPI_DLLESPEC
void*
dpi_uart_bind(
    void* dpi_model,
    const char* name,
    int handle);

DPI_LINK_DECL DPI_DLLESPEC
void*
dpi_i2s_bind(
    void* dpi_model,
    const char* name,
    int handle);

DPI_LINK_DECL DPI_DLLESPEC
void*
dpi_i2c_bind(
    void* dpi_model,
    const char* name,
    int handle);

DPI_LINK_DECL DPI_DLLESPEC
void*
dpi_cpi_bind(
    void* dpi_model,
    const char* name,
    int handle);

DPI_LINK_DECL DPI_DLLESPEC
void*
dpi_i2s_bind(
    void* dpi_model,
    const char* name,
    int handle);

DPI_LINK_DECL DPI_DLLESPEC
void*
dpi_model_load(
    void* comp_config,
    void* handle);

DPI_LINK_DECL DPI_DLLESPEC
int
dpi_model_start(
    void* model);

DPI_LINK_DECL DPI_DLLESPEC
int
dpi_model_stop(
    void* model);

DPI_LINK_DECL DPI_DLLESPEC
void*
dpi_qspim_bind(
    void* dpi_model,
    const char* name,
    int handle);

DPI_LINK_DECL DPI_DLLESPEC
void*
dpi_gpio_bind(
    void* dpi_model,
    const char* name,
    int handle);

DPI_LINK_DECL DPI_DLLESPEC
int
dpi_qspim_cs_edge(
    void* handle,
    int64_t timestamp,
    int csn);

DPI_LINK_DECL DPI_DLLESPEC
int
dpi_qspim_sck_edge(
    void* handle,
    int64_t timestamp,
    svLogic sck,
    svLogic data_0,
    svLogic data_1,
    svLogic data_2,
    svLogic data_3,
    int mask);


DPI_LINK_DECL DPI_DLLESPEC
void
dpi_qspim_edge(
    void* handle,
    int64_t timestamp,
    int data_0,
    int data_1,
    int data_2,
    int data_3,
    int mask);


DPI_LINK_DECL DPI_DLLESPEC
void
dpi_gpio_edge(
    void* handle,
    int64_t timestamp,
    int data_0);

DPI_LINK_DECL DPI_DLLESPEC
int
dpi_start_task(
    int id);

DPI_LINK_DECL DPI_DLLESPEC
int64_t
dpi_time(void *handler);

DPI_LINK_DECL DPI_DLLESPEC
void
dpi_exec_periodic_handler(
    int id);

DPI_LINK_DECL int
dpi_create_task(
    void* handle,
    int id);

DPI_LINK_DECL int
dpi_create_periodic_handler(
    void* handle,
    int id,
    int64_t period);

DPI_LINK_DECL void
dpi_ctrl_reset_edge(
    int handle,
    int reset);

DPI_LINK_DECL void
dpi_ctrl_config_edge(
    int handle,
    int config);

DPI_LINK_DECL void
dpi_fatal(
    void* handle,
    const char* msg);

DPI_LINK_DECL void
dpi_jtag_tck_edge(
    int handle,
    int tck,
    int tdi,
    int tms,
    int trst,
    int* tdo);

DPI_LINK_DECL void
dpi_uart_edge(
    void* handle,
    int64_t timestamp,
    int data);

DPI_LINK_DECL void
dpi_i2c_edge(
    void* handle,
    int64_t timestamp,
    int scl,
    int sda);

DPI_LINK_DECL void
dpi_i2s_edge(
    void* handle,
    int64_t timestamp,
    int sck,
    int ws,
    int sd);

DPI_LINK_DECL void
dpi_i2c_rx_edge(
    int handle,
    int sda);

DPI_LINK_DECL void
dpi_i2s_edge(
    void* handle,
    int64_t timestamp,
    int sck,
    int ws,
    int sd);

DPI_LINK_DECL void
dpi_uart_rx_edge(
    int handle,
    int data);

DPI_LINK_DECL void
dpi_i2s_rx_edge(
    int handle,
    int sck,
    int ws,
    int sd);

DPI_LINK_DECL void
dpi_cpi_edge(
    int handle,
    int pclk,
    int href,
    int vsync,
    int data);



DPI_LINK_DECL void
dpi_trace_msg(
    void* name,
    int level, 
    const char* msg);

DPI_LINK_DECL void
dpi_print(
    void* handle,
    const char* msg);

DPI_LINK_DECL void
dpi_gpio_set_data(
    int handle,
    int data);

DPI_LINK_DECL void
dpi_qspim_set_data(
    int handle,
    int data);

DPI_LINK_DECL void
dpi_qspim_set_qpi_data(
    int handle,
    int data_0,
    int data_1,
    int data_2,
    int data_3,
    int mask);

DPI_LINK_DECL int
dpi_raise_event(
    void* handle);

DPI_LINK_DECL int
dpi_raise_task_event(
    void* handle);

DPI_LINK_DECL int
dpi_raise_event_from_ext(
    void* handle);

DPI_LINK_DECL int
dpi_wait(
    void* handle,
    int64_t t);

DPI_LINK_DECL int
dpi_wait_event(
    void* handle);

DPI_LINK_DECL int
dpi_wait_task_event(
    void* handle);

DPI_LINK_DECL int
dpi_wait_task_event_timeout(
    void* handle, int64_t timeout);

DPI_LINK_DECL int
dpi_wait_ps(
    void* handle,
    int64_t t);

#endif 
