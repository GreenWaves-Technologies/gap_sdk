from plptest import *
import os

TestConfig = c = {}

skip_gvsoc = "No yet supported on GVSOC" if os.environ.get('PLPTEST_PLATFORM') == 'gvsoc' and os.environ.get('TARGET_CHIP') == 'GAP9_V2' else None

def create_checker():
    def check_output(config, output):
        #print(output)
        if output.find('Ended') == -1:
            return (False, "Didn't find output string")
        return (True, None)
    return check_output

def get_gvsoc_test(pkg, name):
    pkg = "{}_{}".format(pkg, name)
    return Test(
        name = pkg,
        commands = [
            Shell('clean', 'make clean'),
            Shell('build', 'make all platform=gvsoc'),
            Shell('run',   'make run platform=gvsoc'),
#            Check('check', create_checker())
        ],
        timeout=10000000,
        skip=skip_gvsoc
    )

def get_emul_test(pkg, name):
    pkg = "{}_{}".format(pkg, name)
    return Test(
        name = pkg,
        commands = [
            Shell('clean', 'make clean -f emul.mk'),
            Shell('build', 'make all -f emul.mk'),
            Shell('run',   './expressions_emul'),
            Check('check', create_checker())
        ],
        timeout=1000000
    )

c['tests'] = [ ]
c['tests'].append(get_gvsoc_test('expressions', 'gvsoc'))

if os.environ.get('PLPTEST_PLATFORM') == 'emul':
    c['tests'].append(get_emul_test('expressions', 'emul'))
