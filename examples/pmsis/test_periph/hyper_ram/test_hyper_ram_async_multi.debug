/****************************************************************************/
#include "pmsis.h"
#include "pmsis_types.h"

#include "rtos/pmsis_os.h"
#include "rtos/pmsis_driver_core_api/pmsis_driver_core_api.h"

#include "pmsis_api/include/drivers/hyperbus.h"

/* Variables used. */
#define BUFFER_SIZE      ( 256 )
#define RAM_ADDR         ( 0x800 )

uint8_t tx_buffer[BUFFER_SIZE];
uint8_t rx_buffer_ram[BUFFER_SIZE];

static uint32_t hyper_buff;
struct pi_hyper_conf conf_ram;
struct pi_device hyper_ram;

volatile int32_t cb = 0;

void cluster_callback(void *arg)
{
    cb++;
    printf("Callback is executing %d\n", cb);
}

void test_hyper( void *parameters )
{
    printf("Entering main controller\n\n");

    uint32_t errors = 0;

    pi_hyper_conf_init(&conf_ram);
    conf_ram.id = 0;
    conf_ram.ram_size = 1<<23;
    conf_ram.type = PI_HYPER_TYPE_RAM;

    /* Hyperram conf init. */
    pi_open_from_conf(&hyper_ram, &conf_ram);
    if (pi_hyper_open(&hyper_ram))
    {
        printf("Open failed !\n");
        return;
    }

    printf("Tx buffer %x, rx buffer %x\n", tx_buffer, rx_buffer_ram);
    /* Initialize the samples. */
    for (uint32_t i=0; i<(uint32_t) BUFFER_SIZE; i++)
    {
        tx_buffer[i] = i & 0xFF;
    }

    /* Write to RAM. */
    pi_task_t *callback;
    for(int i=0; i<5; i++)
    {
        callback = pmsis_l2_malloc(sizeof(struct pi_task));
        //pi_task_callback(callback, cluster_callback, NULL);
        pi_task_block(callback);
        pi_hyper_write_async(&hyper_ram, (RAM_ADDR) + i*256, tx_buffer, BUFFER_SIZE, callback);
        pi_task_wait_on(callback);
    }
    while(cb != 5);

    pi_hyper_write(&hyper_ram, (uint32_t) RAM_ADDR, tx_buffer,
                         BUFFER_SIZE * sizeof(tx_buffer[0]));
    printf("Write finished.\n");

    /* Read from RAM. */
    pi_hyper_read(&hyper_ram, (uint32_t) RAM_ADDR+4*256, rx_buffer_ram,
                   BUFFER_SIZE * sizeof(rx_buffer_ram[0]));
    printf("Read finished.\n");


    /* Release hyperbus driver. */
    pi_hyper_close(&hyper_ram);

    for (uint32_t i=0; i<(uint32_t) BUFFER_SIZE; i++)
    {
        if (tx_buffer[i] != rx_buffer_ram[i])
        {
            errors++;
            printf("%2x-%2x ", tx_buffer[i], rx_buffer_ram[i]);
        }
    }

    printf("\nHyperram transfer done with %d error(s) !\n", errors);
    printf("\nTest %s with %d error(s) !\n", (errors) ? "failed" : "success", errors);

    pmsis_exit(0);
}
/*-----------------------------------------------------------*/
/* Program Entry. */
int main( void )
{
    printf("\n\n\t *** FC Hyper test ***\n\n");
    /* Exit FreeRTOS. */
    int32_t ret = pmsis_kickoff((void *) test_hyper);

    return 0;
}
